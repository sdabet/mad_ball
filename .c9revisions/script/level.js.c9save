{"ts":1343980603088,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"Array.prototype.remove = function(from, to) {\n    var rest = this.slice((to || from) + 1 || this.length);\n\tthis.length = from < 0 ? this.length + from : from;\n\treturn this.push.apply(this, rest);\n};\n\nif (typeof String.prototype.startsWith != 'function') {\n  String.prototype.startsWith = function (str){\n    return this.indexOf(str) == 0;\n  };\n}\n\nfunction getQueryVariable(query,variable) {\n    var vars = query.split(\"&\");\n    for (var i = 0; i < vars.length; i++) {\n        var pair = vars[i].split(\"=\");\n        if (pair[0] == variable) {\n            return unescape(pair[1]);\n        }\n    }\n}\n\nvar container = document.getElementById(\"container\");\n\nvar itemTypes = [ \"ball\", \"wall\", \"gum\", \"left_bouncer\", \"right_bouncer\", \"teleporter\", \"invincible\", \"ghost\", \"iron_wall\", \"bomb\" ];\n\n// Initialize images\nvar imgStore = {};\nvar root = \"http://sdabet.github.com/mad_ball/\";\nvar imgUrls = {\n    \"ball\": root + \"images/ball.png\",\n    \"wall\": root + \"images/wall.png\",\n    \"gum\": root + \"images/smiley.png\",\n    \"left_bouncer\": root + \"images/left_bouncer.png\",\n    \"right_bouncer\": root + \"images/right_bouncer.png\",\n    \"teleporter\": root + \"images/hole.png\",\n    \"invincible\": root + \"images/invincible.png\",\n    \"ghost\": root + \"images/ghost.png\",\n    \"iron_wall\": root + \"images/iron_wall.png\",\n    \"horizontal\": root + \"images/horizontal.png\",\n    \"vertical\": root + \"images/vertical.png\",\n    \"bomb\": root + \"images/bomb.png\"\n};\nfor(var i=0; i<itemTypes.length; i++) {\n    var type = itemTypes[i];\n    var img = new Image();\n    img.style.position = \"absolute\";\n    img.className = \"item \" + type;\n    imgStore[itemTypes[i]] = img;\n    \n    imgStore[type].src = imgUrls[type];\n    imgStore[type].style.backgroundImage = \"url('\" + imgUrls[type] + \"')\";\n}\n\nvar Level = function(board) {\n    \n    var item_sep = \";\";\n    var coord_sep = \",\";\n    \n    var items = [];\n    \n    var drawItem = function(i) {\n        var item = items[i];\n        var itemEl = imgStore[item.type].cloneNode(true);\n    \titemEl.style.left = item.x + \"px\";\n\t\titemEl.style.top = item.y + \"px\";\n        itemEl.style.width = item.w + \"px\";\n        itemEl.style.height = item.h + \"px\";\n\t\tboard.appendChild(itemEl);\n        if(item.animation == \"h\") itemEl.src = imgUrls[\"horizontal\"];\n        if(item.animation == \"v\") itemEl.src = imgUrls[\"vertical\"];\n\t\titem.dom = itemEl;\n    };       \n        \n\t/*\n\t * Check if there is a collision between an area and a set of items\n\t */\n\tvar findCollision = function(x, y, w, h) {\n\t\tfor(var i = 0; i < items.length; i++) {\n\t\t\tvar item = items[i];\n\t\t\tvar collisionX = x + w > item.x && x < item.x + item.w;\n\t\t\tvar collisionY = y + h > item.y && y < item.y + item.h;\n\t\t\tif(collisionX && collisionY) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t};\n\n    /* \n\t * Ball implementation \n\t */\n\tvar boule = {\n\t\tx: 0,\n\t\ty: 0,\n\t\tspeed: 0, // pixels per second\n\t\tdraw: function() {\n\t\t\tvar style = this.dom.style;\n\t\t\tstyle.top = this.y + \"px\";\n\t\t\tstyle.left = this.x + \"px\";\n            style.width = this.w + \"px\";\n            style.height = this.h + \"px\";\n\t\t},\n\t\t/*\n\t\t * Update the position and direction of the ball based on its current speed and the delay since last update\n\t\t */\n\t\tanimate: function(delay) {\n\t\t\tvar delta = parseInt(this.speed * delay / 1000, 10);\n\t\t\tthis.x += delta;\n\t\t\tif(this.x <= 0) {\n\t\t\t\tthis.speed = -this.speed;\n\t\t\t\tthis.x = 0;\n\t\t\t}\n\t\t\telse if(this.x >= board.offsetWidth-this.w) {\n\t\t\t\tthis.speed = -this.speed;\n\t\t\t\tthis.x = board.offsetWidth-this.w;\n\t\t\t}\n\t\t\tthis.draw();\n\t\t},\n\t\t/*\n\t\t * Ball goes up\n\t\t */\n\t\tup: function() {\n\t\t\tif(this.y >= this.h) {\n\t\t\t\tthis.y = this.y - this.h;\n\t\t\t}\n\t\t},\n\t\t/*\n\t\t * Ball goes down\n\t\t */\n\t\tdown: function() {\n\t\t\tif(this.y <= board.offsetHeight - 2*this.h) {\n\t\t\t\tthis.y = this.y + this.h;\n\t\t\t}\n\t\t}\n\t};\n    \n    var setClassUrl = function(className, url) {\n        var elements = document.getElementsByClassName(className);\n        for(var i=0; i<elements.length; i++) {\n            elements[i].src = url;\n        }\n    };\n\n    return {\n        \n        title: \"\",\n        time1: 0.0, time2: 0.0,\n        \n        randomX: function() {\n    \t\treturn Math.floor(Math.random()*(this.boardWidth()-this.unitHeight()));\n    \t},\n    \trandomY: function() {\n    \t\treturn Math.floor(Math.random()*((this.boardHeight()-this.unitHeight())/this.unitHeight())) * this.unitHeight();\n    \t},\n        \n        initBall: function() {\n            var unitHeight = this.unitHeight();\n            // Remove current ball\n            var balls = board.getElementsByClassName(\"ball\");\n            if(balls.length > 0) {\n                board.removeChild(balls[0]);\n            }\n            \n            /* Init ball position */\n    \t\tboule.x = this.randomX();\n    \t\tboule.y = 0; // on the first line\n            boule.w = unitHeight;\n            boule.h = unitHeight;\n    \t\tboule.targetY = boule.y;\n    \t\tboule.dom = imgStore[\"ball\"].cloneNode(true);\n    \t\tboard.appendChild(boule.dom);\n    \t\tboule.draw();\n        },\n\n        lines: 10,\n        \n        unitHeight: function() {\n            return parseInt(this.boardHeight() / this.lines);\n        },\n        \n        boardWidth: function() {\n            return board.clientWidth;\n        },\n        \n        boardHeight: function() {\n            return board.clientHeight;\n        },\n        \n        ready: function() {\n    \t\tcontainer.className = \"ready\";\n            this.initBall();\n    \t},\n        \n        clear: function() {\n            [].forEach.call( board.querySelectorAll(\".item\"), function(el) {\n                board.removeChild(el);\n            });\n            items = [];\n        },   \n        \n        setTypeUrl: function(type,src) {\n            imgStore[type].src = src;\n            setClassUrl(type, src);\n        },\n        \n        setSpeed: function(speed) {\n            boule.speed = speed;\n        },\n        \n        animate: function(elapsed) {\n    \t    boule.animate(elapsed);\n        },\n        \n        ballUp: function() {\n            boule.up();\n        },\n        \n        ballDown: function() {\n            boule.down();\n        },\n    \n        /*\n        * Check if there is any collision between the ball and anything (wall or gum)\n        */\n        checkCollisions: function(onCrashed, onFinished) {\n        \tvar index = findCollision(boule.x, boule.y, boule.w, boule.h);\n            if(index !== null) {\n                var item = items[index];\n                if(item.type == \"wall\") {\n                    onCrashed();\n        \t\t\treturn;\n    \t    \t}\n                else if(item.type == \"gum\") {\n            \t\t// Gum collision\n                    this.removeItem(index);\n                    \n                    // Check if there are still gums\n                    var isFinished = true;\n                    for(var key in items) {\n                        if(items[key].type == \"gum\") {\n                            isFinished = false;\n                        }\n                    }\n        \t\t\tif(isFinished) {\n        \t\t\t\tonFinished();\n        \t\t\t}\n                    \n                    // Bounce\n        \t\t\tboule.speed = -boule.speed;\n                }\n    \t\t}\n    \t},\n        \n        addItem: function(type, x, y, animation, timeout) {\n            console.log(\"addItem(\" + type + \", \" + x + \", \" + y + \", \" + timeout + \")\");\n            var i = items.length;\n            items[i] = {\n                type: type,\n                x: x,\n                y: y,\n                w: this.unitHeight(),\n                h: this.unitHeight(),\n                animation: animation\n            };\n            \n            setTimeout(function() {\n                drawItem(i)\n            }, timeout || 0);\n        },\n        \n        removeItem: function(index) {\n            console.log(\"removeItem(\" + index + \")\");\n    \t\tvar item = items[index];\n\t\t\titem.dom.style.width = \"0\";\n\t\t\titem.dom.style.marginLeft = \"15px\";\n\t\t\titem.dom.style.marginTop = \"15px\";\n\t\t\titem.dom.parentNode.removeChild(item.dom);\n\t\t\titems.remove(index, index);\n        },\n\n        removeItemsAtPosition: function(x,y) {\n            console.log(\"removeItemsAtPosition(\" + x + \", \" + y + \")\");\n            var index = findCollision(x,y,10,10);\n            if(index !== null) {\n                this.removeItem(index);\n            }\n        },\n        \n        getItemAtPosition: function(x,y) {\n            var index = findCollision(x,y,10,10);\n            if(index !== null) {\n                return items[index];\n            }\n            else {\n                return null;\n            }\n        },       \n        \n        backgroundUrl: function() {\n            var backgroundAttr = window.getComputedStyle(board)[\"background-image\"];\n            if(backgroundAttr && backgroundAttr !== \"none\") {\n                return backgroundAttr.substring(4, backgroundAttr.length-1);\n            }\n            return null;\n        },\n    \n        serialize: function(serialize_urls) {\n            var str = \"\";\n            \n            // Serialize board dimensions\n            str += \"boardWidth=\" + board.clientWidth;\n            str += \"&boardHeight=\" + board.clientHeight;\n            str += \"&lines=\" + this.lines;\n            \n            // Serialize ball position\n            str += \"&ball=\" + boule.x + coord_sep + boule.y;\n\n            // Serialize items\n            var itemSerialization = {};\n            var firstItem = {};\n            for(var i=1; i<itemTypes.length; i++) { // Start at 1 : 'ball' is already serialized\n                var type = itemTypes[i];\n                itemSerialization[type] = \"&\" + type + \"s=\";\n                firstItem[type] = true;\n            }\n            for(var i=0; i<items.length; i++) {\n                var item = items[i];\n                itemSerialization[item.type] += (firstItem[item.type] ? \"\" : item_sep) + item.x + coord_sep + item.y;\n                if(item.animation.length > 0) {\n                    itemSerialization[item.type] += coord_sep + item.animation;\n                }\n                firstItem[item.type] = false;\n            }\n            \n            for(var i=1; i<itemTypes.length; i++) { // Start at 1 : 'ball' is already serialized\n                var type = itemTypes[i];\n                if(!firstItem[type]) {\n                    str += itemSerialization[type];\n                }\n            }\n            \n            // Serialize times\n            if(this.time1 > 0) {\n                str += \"&time1=\" + this.time1;\n            }\n            if(this.time2 > 0) {\n                str += \"&time2=\" + this.time2;\n            }\n            \n            // Serialize title\n            if(this.title) {\n                str += \"&title=\" + this.title;\n            }\n            \n            if(serialize_urls) {\n                for(var i=0; i<itemTypes.length; i++) {\n                    var type = itemTypes[i];\n                    str += \"&\" + type + \"Url\" + encodeURIComponent(imgStore[type].src);\n                }\n                \n                // Serialize background image (remove the url('...'))\n                var url = this.backgroundUrl();\n                if(url) {\n                    str += \"&backgroundImage=\" + url;\n                }\n            }\n            \n            return str;\n        },\n        \n        unserialize: function(query) {\n            this.clear();\n            \n            // Unserialize board dimensions\n            var w = getQueryVariable(query, \"boardWidth\");\n            if(w) {\n                board.style.width = w + \"px\";\n            }\n            var h = getQueryVariable(query, \"boardHeight\");\n            if(h) {\n                board.style.height = h + \"px\";\n            }\n            var lines = getQueryVariable(query, \"lines\");\n            if(lines) {\n                this.lines = lines;\n            }\n            \n            // Unserialize ball position\n            var ballStr = getQueryVariable(query, \"ball\");\n            if(ballStr) {\n                var ballStrSplit = ballStr.split(coord_sep);\n                boule.x = parseInt(ballStrSplit[0]);\n                boule.y = parseInt(ballStrSplit[1]);        \n            }\n            \n            // Title\n            var title = getQueryVariable(query, \"title\");\n            if(title) {\n                this.title = title;\n            }            \n\n            // Times\n            var time1 = getQueryVariable(query, \"time1\");\n            if(time1) {\n                this.time1 = time1;\n            }            \n            var time2 = getQueryVariable(query, \"time2\");\n            if(time2) {\n                this.time2 = time2;\n            }            \n\n            // Unserialize items\n            var legacyTypes = itemTypes.concat([\"wall_xmoving\", \"wall_ymoving\", \"left_teleporter\", \"right_teleporter\"]); // legacy compatibility for moving walls\n            for(var i=0; i<legacyTypes.length; i++) {\n                var type = legacyTypes[i];\n                var itemsStr = getQueryVariable(query, type + \"s\");\n                if(itemsStr) {\n                    var itemStrings = itemsStr.split(item_sep);\n                    for(var j=0; j<itemStrings.length; j++) {\n                        var itemStr = itemStrings[j];\n                        var itemStrSplit = itemStr.split(coord_sep);\n                        var animation = itemStrSplit.length > 2 ? itemStrSplit[2] : \"\";\n                        var newType = type;\n                        if(type == \"wall_xmoving\") {\n                            newType = \"wall\";\n                            animation = \"h\";\n                        }\n                        if(type == \"wall_ymoving\") {\n                            newType = \"wall\";\n                            animation = \"v\";\n                        }\n                        if(type == \"left_teleporter\" || type == \"right_teleporter\") {\n                            newType = \"teleporter\";\n                        }\n                        this.addItem(newType, parseInt(itemStrSplit[0]), parseInt(itemStrSplit[1]), animation, 100*j);\n                    }\n                }\n            }\n\n            // Unserialize ball url\n            var ballUrlString = getQueryVariable(query, \"ballUrl\");\n            if(ballUrlString) {\n                this.setTypeUrl(\"ball\", ballUrlString);\n            }\n            \n            // Unserialize image urls\n            for(var i=0; i<itemTypes.length; i++) {\n                var type = itemTypes[i];\n                var itemUrlString = getQueryVariable(query, type + \"Url\");\n                if(itemUrlString) {\n                    this.setTypeUrl(type, itemUrlString);\n                }\n            }\n            \n            // Unserialize background image\n            var backgroundImage = getQueryVariable(query, \"backgroundImage\");\n            if(backgroundImage) {\n                board.style.backgroundImage = \"url('\" + backgroundImage + \"')\";\n            }            \n        },\n    \n        generate: function() {\n            var unitHeight = this.unitHeight();\n            var gumNumber = parseInt(this.boardHeight() / (2*unitHeight));\n            var wallNumber = parseInt(gumNumber);\n            console.log(\"generate: \" + gumNumber + \" gums & \" + wallNumber + \" walls\");\n            this.clear();\n            this.initBall();\n            \n            var margin = 2 * unitHeight;\n    \n    \t\t/* Init gums */\n            var tries = 10;\n    \t\tfor(var i=0; i < gumNumber; i++) {\n    \t\t\tdo {\n                    tries--;\n    \t\t\t\tgum = {\n    \t\t\t\t\tx: this.randomX(),\n    \t\t\t\t\ty: this.randomY(),\n    \t\t\t\t\tw: unitHeight,\n    \t\t\t\t\th: unitHeight\n    \t\t\t\t};\n    \t\t\t} while(tries > 0 && findCollision(gum.x - margin, gum.y - margin, gum.w + 2*margin, gum.h + 2*margin) !== null);\n    \t\t\tthis.addItem(\"gum\", gum.x, gum.y, \"none\", 100*i);\n    \t\t}\n    \n    \t\t/* Init walls */\n            var tries = 10;\n    \t\tfor(var i=0; i < wallNumber; i++) {\n    \t\t\tvar wall;\n    \t\t\tdo {\n                    tries--;\n    \t\t\t\twall = {\n    \t\t\t\t\tx: this.randomX(),\n    \t\t\t\t\ty: this.randomY(),\n    \t\t\t\t\tw: unitHeight,\n    \t\t\t\t\th: unitHeight\n    \t\t\t\t};\n    \t\t\t} while(\n                    tries > 0 &&\n    \t\t\t\tfindCollision(wall.x - margin, wall.y - margin, wall.w + 2*margin, wall.h + 2*margin) !== null\n    \t\t\t\t|| (wall.y <= boule.y+boule.h && wall.y+wall.h >= boule.y) // no wall on the initial ball row\n    \t\t\t);\n                this.addItem(\"wall\", wall.x, wall.y, \"none\", 100*i);\n    \t\t}\n        }\n    };\n};"]],"start1":0,"start2":0,"length1":0,"length2":16322}]],"length":16322}
{"contributors":[],"silentsave":false,"ts":1345711296795,"patch":[[{"diffs":[[0,", \"bomb\""],[1,", \"pinball\""],[0," ];\n\n// "]],"start1":776,"start2":776,"length1":16,"length2":27},{"diffs":[[0,"omb.png\""],[1,",\n    \"pinball\": root + \"images/pinball.png\","],[0,"\n};\nfor("]],"start1":1436,"start2":1436,"length1":16,"length2":61}]],"length":16378,"saved":false}
{"ts":1345711298762,"patch":[[{"diffs":[[0,"all.png\""],[-1,","],[0,"\n};\nfor("]],"start1":1480,"start2":1480,"length1":17,"length2":16}]],"length":16377,"saved":false}
{"ts":1345711331200,"patch":[[{"diffs":[[0," \"pinball\": "],[-1,"root + \""],[1,"\"https://c9.io/sdabet/mad_ball/"],[0,"images/pinba"]],"start1":1449,"start2":1449,"length1":32,"length2":55}]],"length":16400,"saved":false}
{"ts":1345711407223,"patch":[[{"diffs":[[0,"ad_ball/"],[1,"workspace/"],[0,"images/p"]],"start1":1484,"start2":1484,"length1":16,"length2":26}]],"length":16410,"saved":false}
{"ts":1345711442749,"patch":[[{"diffs":[[0,"l\": "],[-1,"\"https://c9.io/sdabet/mad_ball/workspace/"],[1,"root + \""],[0,"imag"]],"start1":1457,"start2":1457,"length1":49,"length2":16}]],"length":16377,"saved":false}
